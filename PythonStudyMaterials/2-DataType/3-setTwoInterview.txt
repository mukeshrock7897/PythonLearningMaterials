**1. Number Data Type (int, float, complex, bool)**

* **Conceptual Questions:**
* "Explain the difference between `int` and `float` data types in Python. When would you use each?"

int: whole numbers, float: numbers with decimal points. Use int for counting, float for measurements.

* "What is the purpose of the `complex` data type? Provide an example of its usage."

complex: represents complex numbers (a+bj), used in scientific/engineering calculations. e.g., complex(2, 3)

* "How does Python handle boolean values, and how are they related to numbers?"

bool: True/False, represented internally as 1/0. Useful for logical operations.

* "What do you understand by immutable data type, and how it relates to number data type?"

Immutable means the value cannot be changed after creation. If you change a number, a new object is created in memory.

* **Coding/Practical Questions:**
* "Write a Python function that takes a number as input and returns its absolute value without using the `abs()` function."

def my_abs(x):
if x < 0:
return -x
else:
return x

* "Explain the difference between `math.ceil()` and `math.floor()`. Give examples of when you would use each."

ceil: rounds up, floor: rounds down. ceil for ensuring a minimum, floor for ensuring a maximum.

* "How do you convert a string representation of a number to an integer or float in Python? What potential errors might occur?"

int("123"), float("123.45"). ValueError if the string is not a valid number.

* "Explain the result of 2**3 and 8**(1/3). How these operations are performed?"

2**3 = 8 (exponentiation), 8**(1/3) = 2.0 (cube root).

* "Explain the difference between round() and fabs() function."

round() rounds to the nearest integer, fabs() returns the absolute value as a float.

* **Advanced Questions:**
* "Discuss the limitations of floating-point arithmetic in Python. How can you mitigate these limitations?"

Floating-point inaccuracies due to binary representation. Use the decimal module for precise calculations.

* "When to use log(), log2(), and log10() functions?"

log() for natural logarithm, log2() for base 2, log10() for base 10.

* "Explain the use of the modf() function, and what kind of result it returns."

modf() returns the fractional and integer parts of a number as a tuple (fractional, integer).



**2. String Data Type**

* **Conceptual Questions:**
* "Explain the concept of string immutability in Python. How does it affect string manipulation?"

Strings cannot be changed in place. Any modification creates a new string object.

* "What are escape characters in Python strings? Provide examples of their usage."

Special characters preceded by \, e.g., \n (newline), \t (tab).

* "Explain the difference between the 'in' and 'not in' operators when used with strings."

'in' checks for substring presence, 'not in' checks for absence.

* "What are the different ways to format strings in Python?"

% formatting, .format(), f-strings.

* **Coding/Practical Questions:**
* "Write a Python function that checks if a given string is a palindrome."

def is_palindrome(s):
return s == s[::-1]

* "Explain the difference between `find()` and `index()` methods for strings. When would you use each?"

find(): returns -1 if not found, index(): raises ValueError. Use find() when absence is possible, index() when presence is guaranteed.

* "How do you split a string into a list of words? How do you join a list of words back into a string?"

split(): str.split(), join(): " ".join(list).

* "Explain the use of strip(), lstrip(), and rstrip() string methods."

strip(): removes leading/trailing whitespace, lstrip(): removes leading, rstrip(): removes trailing.

* "Write a code that will reverse a string."

string[::-1]

* **Advanced Questions:**
* "Discuss the efficiency of different string concatenation methods in Python."

f-strings and .join() are generally more efficient than + for large strings.

* "Explain the use of maketrans() and translate() methods."

maketrans(): creates a translation table, translate(): applies the table to a string for character replacement.

* "Explain the difference between encode() and decode() string methods."

encode(): converts a string to bytes, decode(): converts bytes to a string.




**3. List Data Type**

* **Conceptual Questions:**
* "Explain the difference between lists and tuples in Python. When would you use each?"

Lists: mutable, tuples: immutable. Lists for dynamic data, tuples for fixed data.

* "What is the significance of lists being mutable? How does it affect their usage?"

Mutable: elements can be changed, allowing dynamic modification.

* "How do you access elements in a list using positive and negative indexing?"

Positive: from start (0), negative: from end (-1).

* "Explain the difference between append() and extend() list methods."

append(): adds a single element, extend(): adds multiple elements from an iterable.

* **Coding/Practical Questions:**
* "Write a Python function that sorts a list without using the `sort()` method."

Implement a sorting algorithm like bubble sort or insertion sort.

* "How do you remove duplicate elements from a list while preserving the original order?"

Use a loop and a new list to store unique elements.

* "Explain how to use list slicing to create a new list with a subset of elements."

new_list = old_list[start:end:step].

* "Write a code that will reverse a list without using reverse() method."

list[::-1]

* "Explain the difference between pop() and remove() list methods."

pop(): removes by index, remove(): removes by value.

* **Advanced Questions:**
* "Discuss the time complexity of common list operations like insertion and deletion."

Insertion/deletion at beginning: O(n), append/pop at end: O(1).

* "Explain list comprehension, and provide an example of its usage."

Concise way to create lists. e.g., [x**2 for x in range(10)].

* "How does the copy() method work in lists, and what is the difference between shallow and deep copies?"

copy(): creates a new list. Shallow: copies references, deep: copies values.




**4. Tuple Data Type (Continued)**

* **Coding/Practical Questions:**
* "Write a Python function that takes a list of tuples and sorts them based on the second element of each tuple."

def sort_tuples_by_second(tuples_list):
return sorted(tuples_list, key=lambda x: x[1])

* "How do you unpack a tuple into individual variables?"

a, b, c = (1, 2, 3)

* "Can you modify a tuple after it's created? If not, how can you achieve a similar result?"

No, tuples are immutable. Create a new tuple or convert to a list, modify, and convert back.

* **Advanced Questions:**
* "Discuss the memory efficiency of tuples compared to lists."

Tuples generally use less memory due to their immutability.

* "When is it appropriate to use a named tuple?"

When you need a tuple with named fields for improved readability and maintainability.




**5. Dictionary Data Type**

* **Conceptual Questions:**
* "What are the key characteristics of a dictionary in Python? How does it differ from lists and tuples?"

Key-value pairs, unordered, mutable. Keys must be immutable. Differs from lists (ordered, indexed) and tuples (ordered, immutable).

* "Why must keys in a dictionary be immutable?"

To ensure consistent hashing and lookup.

* "Explain the use of keys(), values(), and items() dictionary methods."

keys(): returns keys, values(): returns values, items(): returns key-value pairs.

* "Explain the difference between get() and setdefault() methods."

get(): returns value or None, setdefault(): returns value or sets a default value.

* **Coding/Practical Questions:**
* "Write a Python function that counts the frequency of words in a given string and stores the results in a dictionary."

def word_frequency(text):
words = text.lower().split()
freq = {}
for word in words:
freq[word] = freq.get(word, 0) + 1
return freq

* "How do you merge two dictionaries in Python?"

{**dict1, **dict2} or dict1.update(dict2)

* "How to iterate through a dictionary, and access both keys and values?"

for key, value in dict.items(): ...

* "Explain the use of pop() and popitem() dictionary methods."

pop(): removes by key, popitem(): removes last item.

* **Advanced Questions:**
* "Discuss the implementation of dictionaries in Python and their time complexity for lookup operations."

Implemented using hash tables, average lookup time is O(1).

* "How can you use dictionary comprehensions to create dictionaries efficiently?"

{key: value for key, value in iterable}

* "When and why would you use OrderedDict?"

When you need to preserve the insertion order of keys.




**6. Set Data Type**

* **Conceptual Questions:**
* "What are the key characteristics of a set in Python?"

Unordered, unique elements, mutable.

* "Why sets do not allow duplicate values?"

Sets are designed to store unique elements.

* "Explain the difference between difference(), intersection(), and union() set methods."

difference(): elements in set1 but not set2, intersection(): common elements, union(): all elements.

* **Coding/Practical Questions:**
* "Write a Python function that finds the unique elements in a list using sets."

def unique_elements(lst):
return list(set(lst))

* "How do you check if one set is a subset of another set?"

set1.issubset(set2)

* "Explain the use of add(), remove(), and pop() set methods."

add(): adds element, remove(): removes element, pop(): removes arbitrary element.

* **Advanced Questions:**
* "Discuss the use cases for frozensets."

Immutable sets, can be used as dictionary keys or in other sets.

* "Explain the time complexity of set operations."

Most set operations (e.g., membership, intersection) have average time complexity of O(1).
